{
  "name": "<%=appname%>",
  "version": "0.0.1",
  "description": "Starter kit project with angular2 and webpack",
  "main": "",
  "repository": {
    "type": "git",
    "url": ""
  },
  "engines": {
    "node": ">= 4.2.1 <= 5"
  },
  "scripts": {
    "build": "webpack --progress --profile --display-error-details --display-cached",
    "watch": "webpack --watch --progress --profile --display-error-details --display-cached",

    "tslint": "tslint -c tslint.json \"<%=clientFolder%>/**/*.ts\" \"test/**/*.ts\" \"fuse/**/*.ts\" ",
    "eslint": "eslint .",
    "clean": "rimraf dist coverage reports",
    "clean:docs": "rimraf doc",

    "error:unbuilt": "echo \"\\x1B[1;30;41mError!\\x1B[0m Target \\x1B[1;35m${TARGET-app}\\x1B[0m has not been built in mode \\x1B[1;35m${MODE-dev}\\x1B[0m. Please run \\x1B[1mTARGET=${TARGET-app} MODE=${MODE-dev} npm run build\\x1B[0m and try again.\" && exit 1",
    "error:not:ionic": "echo \"\\x1B[1;30;41mError!\\x1B[0m Target \\x1B[1;35m${TARGET-app}\\x1B[0m is not a valid ionic target. Please choose a valid target by setting \\x1B[1mTARGET=<ionic_target>\\x1B[0m before running the command and try again. If you have not scaffolded a valid ionic target yet, please run \\x1B[1myo mcfly-ng2:target\\x1B[0m and select ionic.\" && exit 1",
    "error:not:fuse": "echo \"\\x1B[1;30;41mError!\\x1B[0m Target \\x1B[1;35m${TARGET-app}\\x1B[0m is not a valid fuse target. Please choose a valid target by setting \\x1B[1mTARGET=<fuse_target>\\x1B[0m before running the command and try again. If you have not scaffolded a valid fuse target yet, please run \\x1B[1myo mcfly-ng2:target\\x1B[0m and select fuse.\" && exit 1",
    "error:missing:platform": "echo \"\\x1B[1;30;41mError!\\x1B[0m No \\x1B[1;35mPLATFORM\\x1B[0m variable specified. Please choose a valid platform by setting \\x1B[1mPLATFORM=ios\\x1B[0m or \\x1B[1mPLATFORM=android\\x1B[0m before running the command and try again.\" && exit 1",

    "check:target:ionic": "if [ ! -f <%=clientFolder%>/scripts/${TARGET-app}/config.xml ]; then npm run error:not:ionic; fi",
    "check:target:fuse": "if [ ! -f <%=clientFolder%>/scripts/${TARGET-app}/index.ux ]; then npm run error:not:fuse; fi",
    "check:already:built": "if [ ! -d dist/${TARGET-app}/${MODE-dev}/ ]; then npm run error:unbuilt; fi",
    "check:ionic:platform": "if [ -z ${PLATFORM} ]; then error:missing:platform; elif [ ! -d dist/${TARGET-app}/${MODE-dev}/platforms/${PLATFORM} ]; then (OPERATION=add npm run ionic:platform); fi",

    "lint": "npm run tslint && npm run eslint",
    "tslint": "tslint -c tslint.json \"<%=clientFolder%>/**/*.ts\" \"test/**/*.ts\" \"fuse/**/*.ts\" ",
    "eslint": "eslint .",

    "browsersync": "npm run watch & browser-sync start --server=dist/${TARGET-app}/${MODE-dev} --files=\"dist/${TARGET-app}/${MODE-dev}/*.*\" --port 5000 --no-ghost-mode",
    "webpack:server": "webpack-dev-server --hot --colors --progress",

    "typedoc": "./node_modules/.bin/typedoc",
    "docs": "npm run typedoc -- --options typedoc.json --exclude '**/*.spec.ts' --out doc/${TARGET-app} ./<%=clientFolder%>/scripts/${TARGET-app}",

    "karma": "karma start",
    "pretest": "npm run lint",
    "test": "npm run karma",
    "karma:watch": "WATCH=true npm run karma -- --auto-watch --no-single-run",
    "webdriver:update": "webdriver-manager update",
    "webdriver:start": "webdriver-manager start",
    "pree2e": "npm run webdriver:update -- --standalone",
    "e2e": "ts-node node_modules/.bin/protractor",
    "e2e:live": "protractor --elementExplorer",

    "ionic:hooks:chmodx": "find -L dist/${TARGET-app}/${MODE-dev}/hooks -type f -and -exec chmod +x {} \";\"",
    "ionic:package:copy": "cp -f dist/${TARGET-app}/${MODE-dev}/package.json <%=clientFolder%>/scripts/${TARGET-app}/package.json",
    
    "preionic:platform": "npm run check:target:ionic --silent && npm run check:already:built --silent",
    "ionic:platform": "(cd dist/${TARGET-app}/${MODE-dev} && for p in ${PLATFORM-(ios android)}; do for o in ${OPERATION-(rm add)}; do ionic platform $o $p ${OPTIONS}; done; done)",
    "postionic:platform": "npm run ionic:package:copy",
    "ionic:platform:rm": "OPERATION=rm npm run ionic:platform",
    "ionic:platform:add": "OPERATION=add npm run ionic:platform",
    "ionic:platform:android": "PLATFORM=android npm run ionic:platform",
    "ionic:platform:rm:android": "PLATFORM=android OPERATION=rm npm run ionic:platform",
    "ionic:platform:add:android": "PLATFORM=android OPERATION=add npm run ionic:platform",
    "ionic:platform:ios": "PLATFORM=ios npm run ionic:platform",
    "ionic:platform:rm:ios": "PLATFORM=ios OPERATION=rm npm run ionic:platform",
    "ionic:platform:add:ios": "PLATFORM=ios OPERATION=add npm run ionic:platform",

    "preionic:plugin": "npm run check:target:ionic --silent && npm run check:already:built --silent",
    "ionic:plugin": "(cd dist/${TARGET-app}/${MODE-dev} && for p in ${PLUGIN}; do for o in ${OPERATION-(rm add)}; do ionic plugin $o $p ${OPTIONS}; done; done)",
    "postionic:plugin": "npm run ionic:package:copy",
    "ionic:plugin:rm": "OPERATION=rm npm run ionic:plugin",
    "ionic:plugin:add": "OPERATION=add npm run ionic:plugin",

    "preionic:run": "npm run check:target:ionic --silent && npm run check:already:built --silent && npm run check:ionic:platform --silent",
    "ionic:run": "(cd dist/${TARGET-app}/${MODE-dev} && ionic run ${PLATFORM} ${OPTIONS-(--device)})",
    "ionic:run:android": "PLATFORM=android npm run ionic:run",
    "ionic:run:ios": "PLATFORM=ios npm run ionic:run",
    "preionic:serve": "npm run check:target:ionic --silent && npm run check:already:built --silent",
    "ionic:serve": "((npm run watch) & (cd dist/${TARGET-app}/${MODE-dev} && ionic serve ${OPTIONS}))",
    "ionic:serve:lab": "OPTIONS+=(--lab) npm run ionic:serve",
    "preionic:emulate": "npm run check:target:ionic --silent && npm run check:already:built --silent",
    "ionic:emulate": "((npm run watch) & (cd dist/${TARGET-app}/${MODE-dev} && ionic emulate))",

    "prefuse:cli": "npm run check:target:fuse --silent && npm run check:already:built --silent",
    "fuse:clean": "(cd dist/${TARGET-app}/${MODE-dev} && uno clean)",
    "prefuse:cli": "npm run check:target:fuse --silent && npm run check:already:built --silent",
    "fuse:cli": "(cd dist/${TARGET-app}/${MODE-dev} && fuse ${COMMAND} ${ARGS})",
    "fuse:build:ios": "COMMAND=build OPTIONS+=(--target=iOS --run) npm run fuse:cli",
    "fuse:build:android": "COMMAND=build OPTIONS+=(--target=android --run) npm run fuse:cli",
    "fuse:preview": "COMMAND=preview npm run fuse:cli",
    "fuse:preview:ios": "COMMAND=preview OPTIONS+=(--target=ios) npm run fuse:cli",
    "fuse:preview:android": "COMMAND=preview OPTIONS+=(--target=android) npm run fuse:cli",

    "preelectron": "npm run check:already:built --silent",
    "electron": "electron dist/${TARGET-app}/${MODE-dev}",

    "postinstall": "tsd install"    
  },
  "dependencies": {
    "angular2": "2.0.0-beta.8",
    "es6-promise": "^3.0.2",
    "es6-shim": "0.33.13",
    "es7-reflect-metadata": "1.4.0",
    "ionic-angular": "2.0.0-beta.3",
    "ionic-native": "^1.1.0",
    "ionicons": "3.0.0-alpha.3",
    "lodash": "^4.0.1",
    "parse5": "1.4.2",
    "reflect-metadata": "0.1.2",
    "rxjs": "5.0.0-beta.2",
    "zone.js": "0.5.15"
  },
  "devDependencies": {
    "autoprefixer": "^6.3.3",
    "babel-polyfill": "^6.7.4",
    "bluebird": "^3.3.5",
    "browser-sync": "^2.11.1",
    "copy-webpack-plugin": "^1.1.1",
    "coveralls": "^2.11.6",
    "css-loader": "^0.23.1",
    "eslint": "^2.2.0",
    "eslint-plugin-nodeca": "^1.0.3",
    "file-loader": "^0.8.5",
    "html-loader": "^0.4.3",
    "html-webpack-plugin": "^2.9.0",
    "ionic": "^2.0.0-beta.24",
    "istanbul-instrumenter-loader": "^0.2.0",
    "jasmine-spec-reporter": "^2.4.0",
    "json-loader": "^0.5.4",
    "karma": "^0.13.21",
    "karma-chrome-launcher": "^0.2.2",
    "karma-coverage": "^0.5.4",
    "karma-jasmine": "^0.3.7",
    "karma-mocha-reporter": "^1.2.1",
    "karma-nyan-reporter": "^0.2.3",
    "karma-phantomjs-launcher": "^1.0.0",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "1.7.0",
    "ngux-loader": "mcfly-io/ngux-loader",
    "node-dir": "^0.1.12",
    "node-sass": "^3.4.2",
    "phantomjs-polyfill": "0.0.2",
    "phantomjs-prebuilt": "^2.1.4",
    "postcss-loader": "^0.8.1",
    "protractor": "^3.1.1",
    "protractor-jasmine2-screenshot-reporter": "^0.3.0",
    "raw-loader": "^0.5.1",
    "rimraf": "^2.5.2",
    "sass-loader": "^3.1.2",
    "style-loader": "^0.13.0",
    "ts-loader": "^0.8.1",
    "ts-node": "^0.5.5",
    "tsd": "^0.6.5",
    "tslint": "^3.4.0",
    "tslint-eslint-rules": "^1.0.1",
    "tslint-loader": "^2.1.0",
    "typescript": "1.7.5",
    "typedoc": "0.3.12",
    "url-loader": "^0.5.7",
    "webpack": "^1.12.14",
    "webpack-dev-server": "^1.14.1",
    "yargs": "^4.2.0"
  },
  "keywords": [],
  "author": "",
  "license": "MIT"
}